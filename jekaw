#!/bin/sh

set -e

declare LOG_DEBUG="true"
declare DRY_RUN  # Debugging purpose

declare GLOGAL_ARGS=$@  ## store in global variable to access within function

declare JEKA_VERSION_PROP_NAME="jeka.java.version"
declare JEKA_JAR_NAME="dev.jeka.jeka-core.jar"

declare GLOBAL_PROP_FILE
declare JEKA_USER_HOME
declare BASE_DIR  # To find BASE_DIR/jeka/local.properties, BASE_DIR/jeka/def, ...
declare CURRENT_SCRIPT_DIR
declare WORKING_DIR=$(pwd)

declare JDK_DOWNLOAD_DISTRIB="temurin"
declare JDK_DOWNLOAD_LIBC_TYPE="glibc"  # default for linux, overridden for other os
declare JDK_DOWNLOAD_FILE_TYPE="tar.gz" # overridden for *WIN os
declare JDK_DOWNLOAD_OS
declare JDK_DOWNLOAD_ARCH

debug() {
  if [ -n "$LOG_DEBUG" ]; then
    echo "$1"
  fi
}

download_and_unpack() {
  local url=$1
  local dir=$2
  local file_type=$3  # 'zip' or 'tar.gz'
  local temp_file=$(mktemp)
  rm "$temp_file"

  ## download
  if [ -x "$(command -v curl)" ]; then
    curl -Lf --fail --show-error -o "$temp_file" "$url"
  elif [ -x "$(command -v wget)" ]; then
    wget -q -O "$temp_file" "$url"
  else
    echo "Error: curl or wget not found, please make sure one of them is installed" 1>&2
    exit 1
  fi

  ## unpack
  if [ "$file_type" == "tar.gz" ]; then
      mkdir -p "$dir"
      gzip -cd "$temp_file" | tar xf - -C "$dir"
  else
    unzip -qq -o "$temp_file" -d "$dir"
  fi
  rm "$temp_file"
}

get_jeka_user_home() {
  if [ -z "$JEKA_USER_HOME" ]; then
    echo $HOME/.jeka
  else
    echo $JEKA_USER_HOME
  fi
}
JEKA_USER_HOME=$(get_jeka_user_home)
GLOBAL_PROP_FILE=$JEKA_USER_HOME"/global.properties"

# Returns the value of a property within a property file
# call `prop file prop_name'
get_prop_value_from_file() {
    if [ ! -f "$1" ]; then
        return
    fi
    grep "^\\s*${2}=" ${1} | cut -d'=' -f2
}

# Translates a property name (as my.prop) to an env var name (as MY_PROP)
# Call `get_env_var_name "my.prop"`
get_env_var_name() {
  echo $(echo "$1" | tr 'a-z.' 'A-Z_')
}

# Returns the value of a property from a base dir. If value is not found then
# it search recursively in the parent base dir until the parent does not contain a 'jeka' folder.
# call `get_prop_value_from_base_dir base_dir prop_name`
get_prop_value_from_base_dir() {
  local base_dir=$1
  local prop_name=$2
  local value=$(get_prop_value_from_file "$base_dir/jeka/local.properties" "$prop_name")
  if [ -z $value ]; then
    local parent_dir="$base_dir/.."
    local parent_jeka_dir="$parent_dir/jeka"
    if [ -d "$parent_jeka_dir" ]; then
      echo $(get_prop_value_from_base_dir "$parent_dir" "$prop_name")
    else
      echo $(get_prop_value_from_file "$GLOBAL_PROP_FILE" "$prop_name")
    fi
    return
  fi
  echo $value
}

# call `propJavaVersion currentDir`
get_java_version_from_props() {
  local base_dir="$1"
  local version=$(get_prop_value_from_base_dir "$base_dir" "$JEKA_VERSION_PROP_NAME")
  local trimmed_version=$(echo "$version" | sed 's/ //g')  # remove spaces
  echo $trimmed_version
}

# call `get_jdk_home_for_version currentDir javaVersion`
get_jdk_home_for_version() {
  local base_dir=$1
  local jdk_version=$2
  local prop_name="jeka.jdk.$jdk_version"

  # Look first in env variables
  local envValue=$(printenv "$prop_name")
  if [ "$envValue" != "" ]; then
    echo $envValue
    return 0
  fi

  # -- look for 'envVarified' name
  local env_var_name=$(get_env_var_name "$prop_name")
  #envValue=$(printenv "env_var_name")
  #if [ "$envValue" != "" ]; then
  #  echo $envValue
  #  return 0
  #fi

  # Look in property files
  local path=$(get_prop_value_from_base_dir "$base_dir" "$prop_name")
  echo $path
}

get_cache_dir() {
  if [ -z "$JEKA_CACHE_DIR" ]; then
      echo $JEKA_USER_HOME/cache
    else
      echo $JEKA_CACHE_DIR
    fi
}

get_git_cache_dir() {
  echo $(get_cache_dir)/git
}

## To be called as substring=$(substring_before_hash 'Hello#World')
substring_before_hash() {
    # Extract the substring before '#' using cut
    result=$(echo "$1" | cut -d'#' -f1)

    # Echo the resulting substring
    echo "$result"
}

substring_after_hash() {
    # Extract the substring after '#' using parameter expansion
    result=${1#*#}

    # If the input string did not have a '#', return empty. Otherwise, return the result
    if [ "$result" == "$1" ]; then
        echo ""
    else
        echo $result
    fi
}

# Return the argument following '-r' arguments. Returns nothing if '-r' not found.
# It takes an array as argument. If no arguments is passed, it use script exec args.
get_remote_argument() {
  for arg in "$@"; do
    if [ "$previous" == "-r" ]; then
      echo $arg
      return
    fi
    previous=$arg
  done
}

is_git_url() {
    if [[ $1 =~ ^(https://|ssh://|git://|git@).* ]]; then
        echo "true"
    else
        echo "false"
    fi
}

giturl_to_foldername() {
    local url=$1
    local trimmed_url=$(echo $url | sed 's/https:\/\///')
    trimmed_url=$(echo $trimmed_url | sed 's/ssh:\/\///')
    trimmed_url=$(echo $trimmed_url | sed 's/git:\/\///')
    trimmed_url=$(echo $trimmed_url | sed  's/git@//')
    # Extract the repository name from the Git URL using sed and awk
    local foldername=$(echo "$trimmed_url" | sed 's/\//_/g')
    echo $foldername
}

## return value in GLOBAL VAR : REMOTE_BASE_DIR
compute_remote_base_dir() {

    local remote_path_arg=$(get_remote_argument "$@")
    if [ -z "$remote_path_arg" ]; then
        REMOTE_BASE_DIR=""
        debug "No -r argument detected"
        return 0  #no remote argument fount
    fi
    is_git_remote=$(is_git_url "$remote_path_arg")
    if [ "false" == "$is_git_remote" ]; then
      local target_base_dir
      if [[ "$remote_path_arg" == /* ]]; then    # absolute path
        target_base_dir="$remote_path_arg"
        if [ ! -d "$target_base_dir" ]; then
          echo "Directory $target_base_dir does not exist"
          exit 1
        fi
      else  # relative path
        target_base_dir="$WORKING_DIR"/"$remote_path_arg"
        if [ ! -d "$target_base_dir" ]; then
          echo "Directory $target_base_dir does not exist"
          exit 1
        fi
        target_base_dir=$(cd "$target_base_dir" && pwd)  # normalize pass
      fi
      REMOTE_BASE_DIR="$target_base_dir"
      debug "Remote '-r' argument detected with value $target_base_dir"
      return 0
    fi

    ## Remote reference a git repo
    local git_url=$(substring_before_hash "$remote_path_arg")
    local git_tag=$(substring_after_hash "$remote_path_arg")
    local branch_args=""
    if [ "$git_tag" != "" ]; then
      branch_args="--branch $git_tag"
    fi
    local cache_dir_name=$(giturl_to_foldername "$remote_path_arg")
    local target_cache_dir=$(get_git_cache_dir)/"$cache_dir_name"
    if [ ! -d "$target_cache_dir" ]; then
        echo "Cloning $git_url into $target_cache_dir  ..."
        sync
        git clone -c advice.detachedHead=false --depth 1 $branch_args $git_url $target_cache_dir
    else
        echo  "Cache directory $target_cache_dir already exists. Won't clone or update."
    fi
    REMOTE_BASE_DIR=$target_cache_dir
}

# result is written in JEKA_DIST_DIR
compute_jeka_distrib_dir() {
  local base_dir=$1
  local explicit_distrib_dir=$(get_prop_value_from_base_dir "$base_dir" "jeka.distrib.location")
  if [ ! -z "$explicit_distrib_dir" ]; then
    JEKA_DIST_DIR="$explicit_distrib_dir"
    return 0
  fi
  local jeka_version=$(get_prop_value_from_base_dir "$base_dir" "jeka.version")
  if [ -z "$jeka_version" ]; then
    JEKA_DIST_DIR=""
    return 0
  fi
  local distrib_cache_dir=$(get_cache_dir)/distributions/$jeka_version

  if [ -d "$distrib_cache_dir" ]; then
    JEKA_DIST_DIR="$distrib_cache_dir"
  else
    # select download repo
    local jeka_repo="https://repo.maven.apache.org/maven2"
    local download_repo=$(get_prop_value_from_base_dir "$base_dir" "jeka.distrib.location")
    [ ! -z "$download_repo" ] && jeka_repo=$download_repo
    local distrib_repo=$(get_prop_value_from_base_dir "$base_dir" "jeka.distrib.repo")
        [ ! -z "$distrib_repo" ] && jeka_repo=$distrib_repo

    local url=$jeka_repo/dev/jeka/jeka-core/$jeka_version/jeka-core-$jeka_version-distrib.zip
    echo "Download Jeka distrib from $url in $distrib_cache_dir"
    download_and_unpack "$url" "$distrib_cache_dir"
    JEKA_DIST_DIR=$distrib_cache_dir
  fi
}

## Execute Jeka. Call `exec_jeka $base_dir`.
## Returns value in JEKA_CLASSPATH
get_jeka_classpath() {
  local dist_dir=$1

  # If no distrib dir is specified (no jeka.version specified), we look first
  # for jeka-core.jar presence in the same dir of the current script
  if [ -z "$dist_dir" ]; then  ## No jeka.version is specified, should find the local one
    if [ -f "$CURRENT_SCRIPT_DIR/$JEKA_JAR_NAME" ]; then
      dist_dir="$CURRENT_SCRIPT_DIR"
    fi
    if [ -z "$dist_dir" ]; then
      echo "No JeKa distribution found from script $current_script_path."
      echo "You probably forgot to mention a 'jeka.version' or 'jeka.distrib.location' property in local.properties file."
      exit 1
    fi
  fi

  local boot_dir_args

  ## Reference to remote found
  if [ "$REMOTE_BASE_DIR" != "" ]; then
    if [ -d $REMOTE_BASE_DIR"/jeka/boot" ]; then
         boot_dir_args=$REMOTE_BASE_DIR"/jeka/boot/*:"
    fi

  ## No remote script, launch on current dir
  else
    if [ -d "./jeka/boot" ]; then
       boot_dir_args="./jeka/boot/*:"
    fi
  fi
  local jar_file="$dist_dir/$JEKA_JAR_NAME"
  if [ ! -f "$jar_file" ]; then
    echo "Cannot find JeKa jar file $jar_file."
    echo "Are you sure the JeKa distribution you use is properly packaged ?"
    exit 1
  fi
  JEKA_CLASSPATH="$boot_dir_args$jar_file"
}

# call `get_or_download_jdk $javaVersion`. The result is set to DOWNLOAD_JDK_DIR var.
get_or_download_jdk() {
  local javaVersion="$1"
  local specified_distrib=$(get_prop_value_from_base_dir "$BASE_DIR" "jeka.java.distrib")
  if [ -n "$specified_distrib" ]; then
    JDK_DOWNLOAD_DISTRIB="$specified_distrib"
  fi
  local jdk_cache_dir="$(get_cache_dir)/jdks/$JDK_DOWNLOAD_DISTRIB-$javaVersion"
  if [ ! -d "$jdk_cache_dir" ]; then
    if [ -z "$JDK_DOWNLOAD_OS" ]; then
      echo "Unable to download JDK, unsupported Operating System: $(uname -s)" 1>&2
      echo "You may workaround the problem in specifying a 'jeka.jdk.$javaVersion' env var or a property in ~/jeka/global.properties file." 1>&2
      exit 1
    fi
    if [ -z "$JDK_DOWNLOAD_ARCH" ]; then
      echo "Unable to download JDK, unsupported Architecture: $(uname -m)" 1>&2
      echo "You may workaround the problem in specifying a 'jeka.jdk.$javaVersion' env var or property in ~/jeka/global.properties file." 1>&2
      exit 1
    fi
    local download_url="https://api.foojay.io/disco/v3.0/directuris?distro=$JDK_DOWNLOAD_DISTRIB&javafx_bundled=false&libc_type=$JDK_DOWNLOAD_LIBC_TYPE&archive_type=$JDK_DOWNLOAD_FILE_TYPE&operating_system=$JDK_DOWNLOAD_OS&package_type=jdk&version=$javaVersion&architecture=$JDK_DOWNLOAD_ARCH&latest=available"
    echo "Downloading JKD $JDK_DOWNLOAD_DISTRIB $javaVersion to $jdk_cache_dir. It may take a while..."
    download_and_unpack "$download_url" "$jdk_cache_dir" "$JDK_DOWNLOAD_FILE_TYPE"
    if [ "tar.gz" == "$JDK_DOWNLOAD_FILE_TYPE" ]; then
      pushd "$jdk_cache_dir"
      local nested_dir=$(find "." -mindepth 1 -maxdepth 1 -type d | head -n 1 | cut -c 3-)
      popd
      temp_dir=$(mktemp -d)
      mv "$jdk_cache_dir"/"$nested_dir"/* "$temp_dir"
      mv "$temp_dir"/* "$jdk_cache_dir"
    fi
  fi
  DOWNLOAD_JDK_DIR=$jdk_cache_dir
}

## -- script start here

compute_remote_base_dir "$@"
BASE_DIR="$REMOTE_BASE_DIR"
if [ -z "$BASE_DIR" ]; then
  BASE_DIR=$(pwd)
fi
CURRENT_SCRIPT_DIR="$( cd "$(dirname "$0")" ; pwd -P )"

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "$(uname -s)" in
  Linux*)
    JDK_DOWNLOAD_OS="linux"
    if [ -f /etc/alpine-release ]; then
      JDK_DOWNLOAD_OS=alpine-linux
    fi
    ;;
  CYGWIN*|MSYS*)
    cygwin=true
    JDK_DOWNLOAD_OS="windows"
    JDK_DOWNLOAD_LIBC_TYPE="c_std_lib"
    JDK_DOWNLOAD_FILE_TYPE="zip"
    ;;
  MINGW*)
    mingw=true
    JDK_DOWNLOAD_OS="windows"
    JDK_DOWNLOAD_LIBC_TYPE="c_std_lib"
    JDK_DOWNLOAD_FILE_TYPE="zip"
    ;;
  Darwin*)
    darwin=true
    JDK_DOWNLOAD_OS="mac"
    JDK_DOWNLOAD_LIBC_TYPE="libc"; # necessary to download proper JDK

    # Look for the Apple JDKs first to preserve the existing behaviour, and then look
    # for the new JDKs provided by Oracle.
    if [ -z "$JAVA_HOME" ] && [ -L /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK ] ; then
      # Apple JDKs
      JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
    fi
    if [ -z "$JAVA_HOME" ] && [ -L /System/Library/Java/JavaVirtualMachines/CurrentJDK ] ; then
      # Apple JDK
      JAVA_HOME=/System/Library/Java/JavaVirtualMachines/CurrentJDK/Contents/Home
    fi
    if [ -z "$JAVA_HOME" ] && [ -L "/Library/Java/JavaVirtualMachines/CurrentJDK" ] ; then
      # Oracle JDK
      JAVA_HOME=/Library/Java/JavaVirtualMachines/CurrentJDK/Contents/Home
    fi
    if [ -z "$JAVA_HOME" ] && [ -L "/usr/libexec/java_home" ]; then
       # Apple JDKs
       JAVA_HOME=`/usr/libexec/java_home`
    fi
    ;;
esac

case "$(uname -m)" in
  i?86)
    JDK_DOWNLOAD_ARCH="x32";;
  x86_64|amd64)
    JDK_DOWNLOAD_ARCH="x64";;
  aarch64)
    JDK_DOWNLOAD_ARCH="aarch64";;
  armv7l)
    JDK_DOWNLOAD_ARCH="arm";;
  ppc64le)
    JDK_DOWNLOAD_ARCH="ppc64le";;
  s390x)
    JDK_DOWNLOAD_ARCH="s390x";;
  arm64)
    JDK_DOWNLOAD_ARCH="arm64"
    ;;
  *)
    ## AIX gives a machine ID for `uname -m` but it only supports ppc64
    if [ "$os" = "aix" ]; then
      JDK_DOWNLOAD_ARCH="ppc64"
    else
      JDK_DOWNLOAD_ARCH=""
    fi
    ;;
esac

# FIND JAVA HOME

if [ -n "$JEKA_JDK" ] ; then
  JAVA_HOME=$JEKA_JDK
  else
    javaVersion=$(get_java_version_from_props "$BASE_DIR")
    if [ -n "$javaVersion" ]; then
      jdkPath=$(get_jdk_home_for_version "$BASE_DIR" "$javaVersion")
      debug "JDK HOME $javaVersion from env or props : $jdkPath "
      if [ -z "$jdkPath" ]; then
        get_or_download_jdk "$javaVersion"
        if [ "$JDK_DOWNLOAD_OS" == "mac" ]; then
          jdk_entry_sub_dir="/Contents/Home"
        fi
        JAVA_HOME="$DOWNLOAD_JDK_DIR$jdk_entry_sub_dir"
      fi
    fi
fi

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$JEKA_HOME" ] ; then
  ## resolve links - $0 may be a link to jeka's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  JEKA_HOME=`dirname "$PRG"`

  # make it fully qualified
  JEKA_HOME=`cd "$JEKA_HOME" && pwd`

  cd "$saveddir"
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$JEKA_HOME" ] &&
    JEKA_HOME=`cygpath --unix "$JEKA_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$JEKA_CLASSPATH" ] &&
    JEKA_CLASSPATH=`cygpath --path --unix "$JEKA_CLASSPATH"`
fi

# For Migwn, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$JEKA_HOME" ] &&
    JEKA_HOME="`(cd "$JEKA_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`which java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly (valued to $JAVA_HOME )." >&2
  echo "  We cannot execute $JAVACMD" >&2
  echo "  You can specify which JDK to use by setting JEKA_JDK environment variable." >&2
  exit 1
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$JEKA_HOME" ] &&
    JEKA_HOME=`cygpath --path --windows "$JEKA_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$JEKA_CLASSPATH" ] &&
    JEKA_CLASSPATH=`cygpath --path --windows "$JEKA_CLASSPATH"`
fi

## Search if this is a call on remote base dir : result is stored REMOTE_BASE_DIR in case of.
TARGET_BASE_DIR="$BASE_DIR"
if [ -n "$REMOTE_BASE_DIR" ]; then
  TARGET_BASE_DIR="$REMOTE_BASE_DIR"
fi

## When debugging we don't want to execute Jeka
if [ -z "$DRY_RUN" ]; then
  compute_jeka_distrib_dir "$BASE_DIR"
  get_jeka_classpath "$JEKA_DIST_DIR"
  exec "$JAVACMD" $JEKA_OPTS -Djeka.current.basedir=$TARGET_BASE_DIR -cp "$JEKA_CLASSPATH" "dev.jeka.core.tool.Main" "$@"
fi
